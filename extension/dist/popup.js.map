{"version":3,"file":"popup.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://my-vibe-today-extension/./src/popup/popup.css?07b2","webpack://my-vibe-today-extension/./src/utils/logger.js","webpack://my-vibe-today-extension/webpack/bootstrap","webpack://my-vibe-today-extension/webpack/runtime/define property getters","webpack://my-vibe-today-extension/webpack/runtime/hasOwnProperty shorthand","webpack://my-vibe-today-extension/webpack/runtime/make namespace object","webpack://my-vibe-today-extension/./src/popup/popup.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","export const log = {\r\n    info: (message, ...args) => {\r\n        console.log(`[MyVibe Extension] ${message}`, ...args);\r\n    },\r\n    error: (message, ...args) => {\r\n        console.error(`[MyVibe Extension ERROR] ${message}`, ...args);\r\n    },\r\n    warn: (message, ...args) => {\r\n        console.warn(`[MyVibe Extension WARN] ${message}`, ...args);\r\n    }\r\n}; ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './popup.css';\r\nimport { log } from '../utils/logger';\r\n\r\nclass VibeExtension {\r\n    constructor() {\r\n        this.API_BASE = 'http://localhost:3000/api';\r\n        this.initializeExtension();\r\n        this.setupTabs();\r\n    }\r\n\r\n    async initializeExtension() {\r\n        const registration = await this.getStoredRegistration();\r\n        if (registration) {\r\n            this.showSentimentButtons();\r\n        } else {\r\n            this.setupRegistrationForm();\r\n        }\r\n    }\r\n\r\n    async getStoredRegistration() {\r\n        return new Promise((resolve) => {\r\n            chrome.storage.local.get(['registration'], (result) => {\r\n                resolve(result.registration);\r\n            });\r\n        });\r\n    }\r\n\r\n    setupRegistrationForm() {\r\n        const form = document.getElementById('register');\r\n        if (!form) {\r\n            log.error('Registration form not found');\r\n            return;\r\n        }\r\n\r\n        form.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            \r\n            const handle = document.getElementById('handle').value;\r\n            const company = document.getElementById('company').value;\r\n\r\n            try {\r\n                log.info('Attempting registration...', { handle, company });\r\n                \r\n                const response = await fetch(`${this.API_BASE}/register`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({ handle, company })\r\n                });\r\n\r\n                const data = await response.json();\r\n                \r\n                if (!response.ok) {\r\n                    throw new Error(data.error || 'Registration failed');\r\n                }\r\n\r\n                log.info('Registration successful:', data);\r\n\r\n                // Store registration\r\n                await chrome.storage.local.set({\r\n                    registration: {\r\n                        handleId: data.handleId,\r\n                        company: company\r\n                    }\r\n                });\r\n\r\n                this.showSentimentButtons();\r\n\r\n            } catch (error) {\r\n                log.error('Registration failed:', error);\r\n                alert('Registration failed: ' + error.message);\r\n            }\r\n        });\r\n\r\n        // Add login form handler\r\n        const loginForm = document.getElementById('login');\r\n        if (loginForm) {\r\n            loginForm.addEventListener('submit', async (e) => {\r\n                e.preventDefault();\r\n                \r\n                const handle = document.getElementById('loginHandle').value;\r\n\r\n                try {\r\n                    log.info('Attempting login...', { handle });\r\n                    \r\n                    const response = await fetch(`${this.API_BASE}/login`, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({ handle })\r\n                    });\r\n\r\n                    const data = await response.json();\r\n                    \r\n                    if (!response.ok) {\r\n                        throw new Error(data.error || 'Login failed');\r\n                    }\r\n\r\n                    log.info('Login successful:', data);\r\n\r\n                    // Store registration\r\n                    await chrome.storage.local.set({\r\n                        registration: {\r\n                            handleId: data.handleId,\r\n                            company: data.company\r\n                        }\r\n                    });\r\n\r\n                    this.showSentimentButtons();\r\n\r\n                } catch (error) {\r\n                    log.error('Login failed:', error);\r\n                    alert('Login failed: ' + error.message);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    showSentimentButtons() {\r\n        const regForm = document.getElementById('registrationForm');\r\n        const sentButtons = document.getElementById('sentimentButtons');\r\n        \r\n        if (regForm && sentButtons) {\r\n            regForm.style.display = 'none';\r\n            sentButtons.style.display = 'block';\r\n            this.setupSentimentButtons();\r\n        }\r\n    }\r\n\r\n    setupSentimentButtons() {\r\n        const sentiments = ['great', 'meh', 'ugh'];\r\n        sentiments.forEach(sentiment => {\r\n            const btn = document.getElementById(`${sentiment}Btn`);\r\n            if (btn) {\r\n                btn.addEventListener('click', () => this.sendSentiment(sentiment.toUpperCase()));\r\n            }\r\n        });\r\n    }\r\n\r\n    async sendSentiment(sentiment) {\r\n        try {\r\n            const registration = await this.getStoredRegistration();\r\n            if (!registration) {\r\n                throw new Error('Not registered');\r\n            }\r\n\r\n            log.info(`Sending sentiment: ${sentiment}`);\r\n            \r\n            const response = await fetch(`${this.API_BASE}/sentiment`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    handleId: registration.handleId,\r\n                    sentiment: sentiment\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to send sentiment');\r\n            }\r\n\r\n            const data = await response.json();\r\n            log.info('Sentiment sent successfully:', data);\r\n            \r\n            this.showFeedback(sentiment);\r\n\r\n        } catch (error) {\r\n            log.error('Failed to send sentiment:', error);\r\n            alert('Failed to send sentiment. Please try again.');\r\n        }\r\n    }\r\n\r\n    showFeedback(sentiment) {\r\n        const btn = document.getElementById(`${sentiment.toLowerCase()}Btn`);\r\n        if (btn) {\r\n            const originalText = btn.textContent;\r\n            btn.textContent = 'Sent! 👍';\r\n            setTimeout(() => {\r\n                btn.textContent = originalText;\r\n            }, 2000);\r\n        }\r\n    }\r\n\r\n    setupTabs() {\r\n        const tabBtns = document.querySelectorAll('.tab-btn');\r\n        tabBtns.forEach(btn => {\r\n            btn.addEventListener('click', () => {\r\n                // Remove active class from all tabs\r\n                document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));\r\n                document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));\r\n                \r\n                // Add active class to clicked tab\r\n                btn.classList.add('active');\r\n                const tabId = btn.getAttribute('data-tab') + 'Tab';\r\n                document.getElementById(tabId).classList.add('active');\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n// Initialize the extension\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new VibeExtension();\r\n}); "],"names":[],"sourceRoot":""}